import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data.config import BOT_TOKEN
from methods.copilot import get_answer
from methods.dalle import create_picture
from methods.sql import Sql_db


logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

messages = []

SQL = Sql_db()


class UserState(StatesGroup):
    state0 = State()
    state1 = State()
    state2 = State()
    state3 = State()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    SQL.add_user(message.chat.id, message.chat.username, message.chat.first_name)
    buttons = [[types.KeyboardButton(text="ü§ñ –ù–µ–π—Ä–æ–Ω–∫–∏"), types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
               [types.KeyboardButton(text="üå∫ –ü—Ä–æ—Ñ–∏–ª—å")], [types.KeyboardButton("üçÄ –û –ø—Ä–æ–µ–∫—Ç–µ")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("Welcome !", reply_markup=keyboard)


@dp.message_handler()
async def main_menu(message: types.Message):
    if message.text == "üçÄ –û –ø—Ä–æ–µ–∫—Ç–µ":
        await message.answer("–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –¥–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –¥–∏–∞–ª–æ–≥–∏ —Å ChatGPT –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ "
                             "—á–µ—Ä–µ–∑ DALL-E –∏ –∞–Ω–∞–ª–æ–≥ Midjourney, –∫–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç "
                             "–≤–∞—à–µ–≥–æ –ó–∞–ø—Ä–æ—Å–∞.\n\nüíé –î–∏–∞–ª–æ–≥–∏ —Å ChatGPT —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ç–æ–∫–µ–Ω–∞—Ö\n\n–¢–æ–∫–µ–Ω ‚Äî —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è "
                             "—Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –æ–±—â–µ–Ω–∏—è —Å –°hatGPT. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ "
                             "—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.\n\n‚òÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å–∞—Ö\n\n–ü—Ä–æ–µ–∫—Ç —Å–¥–µ–ª–∞–Ω –≤ "
                             "–æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.")

    elif message.text == "ü§ñ –ù–µ–π—Ä–æ–Ω–∫–∏":
        buttons = [
            [types.InlineKeyboardButton("üí¨ ChatGPT", callback_data="gpt")],
            [types.InlineKeyboardButton("üé® DALL-E", callback_data="dalle")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å: ", reply_markup=keyboard)

    elif message.text == "üå∫ –ü—Ä–æ—Ñ–∏–ª—å":
        data = SQL.find_user(message.chat.id)
        await message.answer(f"üëã @{data[2]}\n‚ù§ {data[3]}\n\n"
                             f"üí∞ –ë–∞–ª–∞–Ω—Å: 0 ¬•\n\nüîπ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ‚àû\n"
                             f"üîπ –¢–æ–∫–µ–Ω–æ–≤ ChatGPT –æ—Å—Ç–∞–ª–æ—Å—å: ‚àû\n\nüíé –ü–æ–¥–ø–∏—Å–∫–∞ ChatGPT:  SuperUltraMega")

    elif message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        data = SQL.find_user(message.chat.id)
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="change_token")]])
        await message.answer(f"üîë –ê–∫—Ç—É–∞–ª—å–Ω—ã–π OpenAI —Ç–æ–∫–µ–Ω:\n       *{data[-1]}*", parse_mode="Markdown", reply_markup=keyboard)


@dp.callback_query_handler(text="change_token")
async def change_token_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.answer()
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:", reply_markup=keyboard)
    await UserState.state2.set()


@dp.message_handler(state=UserState.state2)
async def change_token(message: types.Message, state: FSMContext):
    SQL.change_token(message.chat.id, message.text)
    await message.answer("üîë –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.finish()


@dp.callback_query_handler(text='dalle', state='*')
async def dalle_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.answer()
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]])
    await callback.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º", reply_markup=keyboard)
    await UserState.state1.set()


@dp.message_handler(state=UserState.state1)
async def generate_picture(message: types.Message, state: FSMContext):
    token = SQL.find_user(message.chat.id)[-1]
    buttons = [[types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await state.update_data(dalle=message.text)
    await message.answer('‚åõ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∑–∞–ø—Ä–æ—Å–æ–º...')
    await message.answer_photo(photo=create_picture(message.text, token), reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(text='gpt', state='*')
async def chatpgt_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.answer()
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]])
    await callback.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º", reply_markup=keyboard)
    await UserState.state0.set()


@dp.message_handler(state=UserState.state0)
async def get_message_gpt(message: types.Message, state: FSMContext):
    token = SQL.find_user(message.chat.id)[-1]
    buttons = [[types.InlineKeyboardButton("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data='new_dialog'),
         types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await state.update_data(gpt=message.text)
    await message.answer('‚åõ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∑–∞–ø—Ä–æ—Å–æ–º...')
    messages.append({"role": "user", "content": message.text})
    response = get_answer(messages, token)
    result = response.choices[0]['message']
    messages.append(result)
    await message.answer(result['content'], reply_markup=keyboard)
    await UserState.state0.set()


@dp.callback_query_handler(text='new_dialog', state='*')
async def new_dialog(callback: types.CallbackQuery, state: FSMContext):
    global messages
    await state.finish()
    await callback.answer()
    messages = []
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]])
    await callback.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º", reply_markup=keyboard)
    await UserState.state0.set()


@dp.callback_query_handler(text='cancel', state='*')
async def cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.answer("üõë –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@dp.callback_query_handler(text='back_to_menu', state='*')
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.answer()
    buttons = [
        [types.InlineKeyboardButton("üí¨ ChatGPT", callback_data="gpt")],
        [types.InlineKeyboardButton("üé® Dall-E", callback_data="dalle")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å: ", reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)